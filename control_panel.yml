esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: ERROR

# Enable Home Assistant API
api:
  encryption:
    key: ${api_key}
    
# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: ${ip_address}
    gateway: ${gateway}
    subnet: ${subnet}

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
# captive_portal:

dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp32.yaml@main
  import_full_config: true

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
# esp32_improv:
#  authorizer: none

# To have a "next url" for improv serial
# web_server:


globals:
  - id: sequence
    type: int
    initial_value: "0"
    restore_value: "False"


binary_sensor:
  - platform: gpio
    pin:
      number: GPIO12
      mode:
        input: true
        pullup: true
      inverted: true
    name: Blue Button
    on_press:
      - delay: 1ms
    id: btn_blue
    filters:
      - delayed_off: 20ms
  - platform: gpio
    pin:
      number: GPIO27
      mode:
        input: true
        pullup: true
      inverted: true
    name: White Button
    id: btn_white
    on_press:
      - delay: 1ms
    filters:
      - delayed_off: 20ms
  - platform: gpio
    pin:
      number: GPIO25
      mode:
        input: true
        pullup: true
      inverted: true
    name: Red Button
    id: btn_red
    on_press:
      - delay: 1ms
    filters:
      - delayed_off: 20ms
  - platform: gpio
    pin:
      number: GPIO32
      mode:
        input: true
        pullup: true
      inverted: true
    name: Yellow Button
    id: btn_yellow
    on_press:
      - delay: 1ms
    filters:
      - delayed_off: 20ms
  - platform: gpio
    pin:
      number: GPIO13
      mode:
        input: true
        pullup: true
      inverted: true
    name: Green Button
    id: btn_green
    on_press:
      - delay: 1ms
    filters:
      - delayed_off: 20ms

# Setting values:
# 0 / OFF
# 1 / ON
# 2 / Slow Flash
# 3 / Fast Flash
number:
  - platform: template
    id: indicator_blue
    name: LED Blue
    max_value: 3
    min_value: 0
    optimistic: True
    step: 1
    mode: BOX           
    initial_value: 0
    restore_value: True
  - platform: template
    id: indicator_white
    name: LED White
    max_value: 3
    min_value: 0
    optimistic: True
    step: 1
    mode: BOX           
    initial_value: 0
    restore_value: True
  - platform: template
    id: indicator_red
    name: LED Red
    max_value: 3
    min_value: 0
    optimistic: True
    step: 1
    mode: BOX           
    initial_value: 0
    restore_value: True
  - platform: template
    id: indicator_yellow
    name: LED Yellow
    max_value: 3
    min_value: 0
    optimistic: True
    step: 1
    mode: BOX           
    initial_value: 0
    restore_value: True
  - platform: template
    id: indicator_green
    name: LED Green
    max_value: 3
    min_value: 0
    optimistic: True
    step: 1
    mode: BOX           
    initial_value: 0
    restore_value: True

interval:
  - id: setter
    interval: 100ms
    then:    
      - lambda: |-
          int seq = id(sequence);
          if (id(indicator_blue).state == 3) {
            if (seq % 2 == 0) id(led_blue).turn_on();
            if (seq % 2 == 1) id(led_blue).turn_off();
          } else if (id(indicator_blue).state == 2) {
            if (seq % 4 == 0) id(led_blue).turn_on();
            if (seq % 4 == 2) id(led_blue).turn_off();
          } else if (id(indicator_blue).state == 1) {
            id(led_blue).turn_on();
          } else {
            id(led_blue).turn_off();
          }
          if (id(indicator_white).state == 3) {
            if (seq % 2 == 0) id(led_white).turn_on();
            if (seq % 2 == 1) id(led_white).turn_off();
          } else if (id(indicator_white).state == 2) {
            if (seq % 4 == 0) id(led_white).turn_on();
            if (seq % 4 == 2) id(led_white).turn_off();
          } else if (id(indicator_white).state == 1) {
            id(led_white).turn_on();
          } else {
            id(led_white).turn_off();
          }
          if (id(indicator_red).state == 3) {
            if (seq % 2 == 0) id(led_red).turn_on();
            if (seq % 2 == 1) id(led_red).turn_off();
          } else if (id(indicator_red).state == 2) {
            if (seq % 4 == 0) id(led_red).turn_on();
            if (seq % 4 == 2) id(led_red).turn_off();
          } else if (id(indicator_red).state == 1) {
            id(led_red).turn_on();
          } else {
            id(led_red).turn_off();
          }
          if (id(indicator_yellow).state == 3) {
            if (seq % 2 == 0) id(led_yellow).turn_on();
            if (seq % 2 == 1) id(led_yellow).turn_off();
          } else if (id(indicator_yellow).state == 2) {
            if (seq % 4 == 0) id(led_yellow).turn_on();
            if (seq % 4 == 2) id(led_yellow).turn_off();
          } else if (id(indicator_yellow).state == 1) {
            id(led_yellow).turn_on();
          } else {
            id(led_yellow).turn_off();
          }
          if (id(indicator_green).state == 3) {
            if (seq % 2 == 0) id(led_green).turn_on();
            if (seq % 2 == 1) id(led_green).turn_off();
          } else if (id(indicator_green).state == 2) {
            if (seq % 4 == 0) id(led_green).turn_on();
            if (seq % 4 == 2) id(led_green).turn_off();
          } else if (id(indicator_green).state == 1) {
            id(led_green).turn_on();
          } else {
            id(led_green).turn_off();
          }
      - globals.set:
          id: sequence
          value: !lambda return (id(sequence) + 1) % 16;
          
switch:
  - platform: gpio
    id: led_blue
    pin: GPIO15
  - platform: gpio
    id: led_white
    pin: GPIO21
  - platform: gpio
    id: led_red
    pin: GPIO16
  - platform: gpio
    id: led_yellow
    pin: GPIO5
  - platform: gpio
    id: led_green
    pin: GPIO19
