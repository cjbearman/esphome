esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  includes:
    - scroller.h
    - cpalette.h
  project:
    name: esphome.web
    version: dev

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  encryption: 
    key: ${api_key}

# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: ${static_ip}
    gateway: ${gateway}
    subnet: ${subnet}

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
# captive_portal:

dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp32.yaml@main
  import_full_config: true

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
# esp32_improv:
#   authorizer: none

# To have a "next url" for improv serial
# web_server:

globals:
  - id: ticker_content
    type: std::string
    restore_value: False

font:
  - file: "gfonts://Lekton"
    id: jumbo
    size: 128
  - file: "gfonts://Lekton"
    id: large
    size: 64
  - file: "gfonts://Lekton"
    id: medium
    size: 40
  - file: "gfonts://Lekton"
    id: small
    size: 24  

number:
  - platform: homeassistant
    id: outdoor_temp
    entity_id: ${outdoor_temp_sensor}
  - platform: homeassistant
    id: indoor_temp
    entity_id: ${indoor_temp_sensor}
  - platform: template
    id: daytime_brightness
    name: Daytime Brightness
    min_value: 0
    max_value: 100
    step: 1
    optimistic: true
    initial_value: 100
    restore_value: True
  - platform: template
    id: nighttime_brightness
    name: Nighttime Brightness
    min_value: 0
    max_value: 100
    step: 1
    optimistic: true
    initial_value: 20
    restore_value: True

spi:
  - interface: hardware
    mosi_pin: GPIO23
    miso_pin: GPIO19
    clk_pin: GPIO18

display:
  - platform: ili9xxx
    model: ${display_driver}
    cs_pin: GPIO33
    dc_pin: GPIO25
    reset_pin: GPIO26
    invert_colors: true
    dimensions:
      height: 320
      width: 240
    rotation: 90
    update_interval: 100ms
    data_rate: ${spi_speed}
    auto_clear_enabled: False

    lambda: |-
      // This update is written to only update the full display when something other than the scrolling message
      // changes. Otherwise it just updates the scrolling message segment
      // If we updated everything on every cycle, that's a 100ms or so update time and should be avoided

      static int pos = 0;                             // Scroller position
      static int delay = 0;                           // Scroller current delay
      static char buf[26];                            // Buffer for current visible scroller text
      static const char *VERSION = "1.2";             // Clock version
      static float lastIndoorTemp=-9999;              // Current and prior temperature values
      static float currentIndoorTemp; 
      static float lastOutdoorTemp=-9999;
      static float currentOutdoorTemp;
      static char lastTime[12];                       // Last time displayed
      static char currentTime[12];                    // Current time
      char currentDate[32];                           // Current date
      const char *tf = "%I:%M %p";                    // Time format, day mode
      const char *tfn = "%I:%M";                      // Time format, night mode
      const char *df = "%a %d %b %Y";                 // Date format
      static char *lastMessage = NULL;                // Copy of the message we are currently displaying (dynamicly allocated)
      static int curMode = -1;                        // Display mode, 0=Init, 1=Day, 2=Night
      static int delayCycles = 20;                    // Number of update cycles to delay scroller at start and end
      static float last_brightness = -1;              // Last set brightness
      float target_brightness = -1;                   // Targetted brightness
      static bool last_is_connected = false;          // Whether we were connected on last run
      bool is_connected;                              // Whether we are connected now

      struct tm c_tm = id(esptime).now().to_c_tm();   // Get current time

      // Assume daytime unless otherwise adjusted
      target_brightness = id(daytime_brightness).state;

      bool color_change = update_palette(id(daytime_color_palette).active_index().value_or(0), id(nighttime_color_palette).active_index().value_or(0));

      if (!id(time_valid).state) {
        // INIT mode, because we don't have a valid time yet
        if (curMode != 0) {
          ESP_LOGD("main", "Full update, init mode");
          it.fill(PAL_BACKGROUND);
          it.printf(160, 0, id(small), PAL_CLOCK, PAL_BACKGROUND, display::TextAlign::TOP_CENTER, "HA ESP clock v%s", VERSION);
          it.printf(160, 140, id(medium), PAL_DATE, PAL_BACKGROUND, display::TextAlign::CENTER, "Connecting...");
          curMode = 0;
        }
      } else if (id(night_mode).state) {        
        // NIGHT mode
        target_brightness = id(nighttime_brightness).state;
        if (curMode != 1) {
          // Not in night mode, brightness adjustment required
         id(backlight).turn_on().set_brightness(id(nighttime_brightness).state / 100).perform();
        }

        strftime(currentTime, 65, tfn, &c_tm);
        if (strcmp(currentTime, lastTime) || curMode != 1 || color_change) {
          ESP_LOGD("main", "Full update, night mode");
          it.fill(PAL_NIGHT_BACKGROUND);
          it.printf(160, 120, id(jumbo), PAL_NIGHT_FOREGROUND, PAL_NIGHT_BACKGROUND, display::TextAlign::CENTER, "%s", currentTime);
          strcpy(lastTime, currentTime);
          curMode = 1;
        }
        
      } else {
        if (curMode == 1) {
          // Currently in night mode, backlight adjustment required
         id(backlight).turn_on().set_brightness(id(daytime_brightness).state / 100).perform();
        }

        // Establish current time and temperature values
        strftime(currentTime, 65, tf, &c_tm);     
        currentIndoorTemp = id(indoor_temp).state;
        currentOutdoorTemp = id(outdoor_temp).state;
        is_connected = id(pstatus).state;
        if (strcmp(currentTime, lastTime) || currentIndoorTemp != lastIndoorTemp || currentOutdoorTemp != lastOutdoorTemp || curMode != 2 || last_is_connected != is_connected || color_change) {
          // Full update only if time (or date by implication), or temps have changed, or mode switch, or connectivity change
          // This is an expensive operation, so we restrict it to when absolutely necessary
          // so that we can have fast scrolling at other times
          ESP_LOGD("main", "Full update, day mode");
          strcpy(lastTime, currentTime);
          lastOutdoorTemp = currentOutdoorTemp;
          lastIndoorTemp = currentIndoorTemp;
          last_is_connected = is_connected;
          curMode = 2;
          it.fill(PAL_BACKGROUND);
          it.printf(160, 80, id(large), PAL_CLOCK, PAL_BACKGROUND, display::TextAlign::CENTER, "%s", currentTime);
          strftime(currentDate, 65, df, &c_tm);
          it.printf(160, 0, id(medium), PAL_DATE, PAL_BACKGROUND, display::TextAlign::TOP_CENTER, "%s", currentDate);
          it.printf(0, 200, id(small), PAL_LABELS, PAL_BACKGROUND, display::TextAlign::BOTTOM_LEFT, "Outdoor");
          it.printf(0, 240, id(medium), outdoor(currentOutdoorTemp), PAL_BACKGROUND, display::TextAlign::BOTTOM_LEFT, "%.1f°", currentOutdoorTemp);
          it.printf(220, 200, id(small), PAL_LABELS, PAL_BACKGROUND, display::TextAlign::BOTTOM_LEFT, "Indoor");
          it.printf(220, 240, id(medium), indoor(currentIndoorTemp), PAL_BACKGROUND, display::TextAlign::BOTTOM_LEFT, "%.1f°", currentIndoorTemp);

          if (!is_connected) {
            it.filled_rectangle(70, 148, 180, 25, Color(PAL_ALERT_BACKGROUND));
            it.printf(160, 150, id(small), PAL_ALERT_FOREGROUND, PAL_ALERT_BACKGROUND, display::TextAlign::TOP_CENTER, "No Connection");
          }
        }

        // Scroller gets updated on every interval      
        const char *incoming_msg = id(ticker_content).c_str();

        if (lastMessage == NULL || strcmp(lastMessage, incoming_msg)) {
          // We haven't captured a last message, or the last message is not the same as the one provided by sensor
          if (lastMessage != NULL) {
            // free our last message buffer if set
            ESP_LOGD("main", "Free message buffer");
            free(lastMessage);
          }
          // allocate a new buffer
          int newLen = strlen(incoming_msg) + 1;
          lastMessage = (char *) malloc(newLen);
          ESP_LOGD("main", "Allocate message buffer : %d chars", newLen);
          // copy message
          strcpy(lastMessage, incoming_msg);
          ESP_LOGD("main", "New Message: %s", incoming_msg);
          // reset scroller position
          pos = 0;
          delay = 0;
          scroller(lastMessage, buf, sizeof(buf), &pos, &delay, delayCycles);
          delay = delayCycles;

        }

        scroller(lastMessage, buf, sizeof(buf), &pos, &delay, delayCycles);
        // Blank out the background behind the scroller
        it.filled_rectangle(0, 118, 320, 26, PAL_BACKGROUND);
        // And redraw
        it.printf(0, 120, id(small), PAL_MSG, PAL_BACKGROUND, display::TextAlign::TOP_LEFT, "%s", buf);
      }

      if (target_brightness != last_brightness) {
        id(backlight).turn_on().set_brightness(target_brightness / 100).perform();
        last_brightness = target_brightness;
      }
      
switch:
  - platform: template
    id: night_mode
    name: Night mode
    optimistic: True
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: template
    id: time_valid
    optimistic: True
    restore_mode: ALWAYS_OFF

output:
  - platform: ledc
    pin: GPIO32
    id: backlight_pwm

light:
  - platform: monochromatic
    output: backlight_pwm
    id: backlight
    restore_mode: ALWAYS_ON
    default_transition_length: 0s

time:
  - platform: homeassistant
    id: esptime
    on_time_sync: 
      then:
        switch.turn_on: time_valid
    timezone: "America/Chicago"

binary_sensor:
  - platform: status
    id: pstatus

http_request:
  timeout: 5s
  follow_redirects: False
  verify_ssl: false
    

interval:  
  - interval: ${ticker_update_frequency}
    then:
      - http_request.get:
            url: ${ticker_content_url}
            capture_response: true
            on_response: 
              then:
                - lambda: |-
                    if (response->status_code == 200) {
                      id(ticker_content) = body;   
                      ESP_LOGD("main", "Ticker content updated");
                    } else {
                      ESP_LOGE("main", "Error on HTTP request for ticker content: %d", response->status_code);
                    }


select:
  - platform: template
    id: daytime_color_palette
    name: Daytime Color
    options:
      - "Original"
      - "Pastel"
      - "Blues"
      - "Greens"
      - "Monochrome"
    optimistic: True
    initial_option: "Original"
    restore_value: True
  - platform: template
    id: nighttime_color_palette
    name: Nighttime Color
    options:
      - "Red"
      - "Green"
      - "Yellow"
      - "Blue"
      - "White"
      - "Black on White"
    optimistic: True
    initial_option: "Red"
    restore_value: True

