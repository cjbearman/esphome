esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev

esp32:
  board: esp32dev
  framework:
    type: arduino
  

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: ${ip_address}
    gateway: ${gateway}
    subnet: ${subnet}


# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
# captive_portal:


dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp32.yaml@main
  import_full_config: true

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
#esp32_improv:
#  authorizer: none

# To have a "next url" for improv serial
web_server:

binary_sensor:
  - platform: gpio
    id: bark
    name: Bark Detected
    pin: 
      number: GPIO35
      mode:
        input: True
        pulldown: False
        pullup: False
      inverted: False  
    publish_initial_state: True
    filters: 
      - delayed_off: 10s
      - delayed_on: 50ms

number:
  - platform: template
    id: sleep_duration
    name: Sleep Duration (Minutes)
    min_value: 1
    max_value: 1440
    mode: BOX
    restore_value: True
    initial_value: 1
    step: 1
    optimistic: True

deep_sleep:
  id: deep_sleep_1

button:
  - platform: template
    id: sleep_now
    name: Sleep Now
    on_press: 
      then:
        - deep_sleep.enter:
            id: deep_sleep_1
            sleep_duration: !lambda |-
                int sleepfor = ((long long int)id(sleep_duration).state) * 60000;
                ESP_LOGI("MAIN", "Sleep Value: %d", sleepfor);
                return sleepfor;


