esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: INFO
  
# Enable Home Assistant API
api:
  encryption:
    key: ${encryption_key}

# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: ${ip_address}
    gateway: ${gateway}
    subnet: ${subnet}
  
dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp32.yaml@main
  import_full_config: true

globals:
  - id: sequence
    type: int
    initial_value: "0"
    restore_value: "False"

time:
  - platform: homeassistant
    id: esptime
    timezone: "America/Chicago"

# These components signal presses of the various buttons
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO16
      mode:
        input: true
        pullup: true
      inverted: true
    name: Blue Button
    on_press:
      - delay: 1ms
    id: btn_blue
    filters:
      - delayed_off: 20ms
  - platform: gpio
    pin:
      number: GPIO17
      mode:
        input: true
        pullup: true
      inverted: true
    name: White Button
    id: btn_white
    on_press:
      - delay: 1ms
    filters:
      - delayed_off: 20ms
  - platform: gpio
    pin:
      number: GPIO18
      mode:
        input: true
        pullup: true
      inverted: true
    name: Red Button
    id: btn_red
    on_press:
      - delay: 1ms
    filters:
      - delayed_off: 20ms
  - platform: gpio
    pin:
      number: GPIO19
      mode:
        input: true
        pullup: true
      inverted: true
    name: Yellow Button
    id: btn_yellow
    on_press:
      - delay: 1ms
    filters:
      - delayed_off: 20ms
  - platform: gpio
    pin:
      number: GPIO22
      mode:
        input: true
        pullup: true
      inverted: true
    name: Green Button
    id: btn_green
    on_press:
      - delay: 1ms
    filters:
      - delayed_off: 20ms

# These components set the status of each LED to one of four modes:
# Setting values:
# 0 / OFF
# 1 / ON
# 2 / Slow Flash
# 3 / Fast Flash
number:
  - platform: template
    id: indicator_blue
    name: LED Blue
    max_value: 3
    min_value: 0
    optimistic: True
    step: 1
    mode: BOX           
    initial_value: 0
    restore_value: True
  - platform: template
    id: indicator_white
    name: LED White
    max_value: 3
    min_value: 0
    optimistic: True
    step: 1
    mode: BOX           
    initial_value: 0
    restore_value: True
  - platform: template
    id: indicator_red
    name: LED Red
    max_value: 3
    min_value: 0
    optimistic: True
    step: 1
    mode: BOX           
    initial_value: 0
    restore_value: True
  - platform: template
    id: indicator_yellow
    name: LED Yellow
    max_value: 3
    min_value: 0
    optimistic: True
    step: 1
    mode: BOX           
    initial_value: 0
    restore_value: True
  - platform: template
    id: indicator_green
    name: LED Green
    max_value: 3
    min_value: 0
    optimistic: True
    step: 1
    mode: BOX           
    initial_value: 0
    restore_value: True

interval:
  - id: setter
    interval: 100ms
    then:    
      - lambda: |-
          int seq = id(sequence);
          if (id(indicator_blue).state == 3) {
            if (seq % 2 == 0) id(led_blue).turn_on();
            if (seq % 2 == 1) id(led_blue).turn_off();
          } else if (id(indicator_blue).state == 2) {
            if (seq % 4 == 0) id(led_blue).turn_on();
            if (seq % 4 == 2) id(led_blue).turn_off();
          } else if (id(indicator_blue).state == 1) {
            id(led_blue).turn_on();
          } else {
            id(led_blue).turn_off();
          }
          if (id(indicator_white).state == 3) {
            if (seq % 2 == 0) id(led_white).turn_on();
            if (seq % 2 == 1) id(led_white).turn_off();
          } else if (id(indicator_white).state == 2) {
            if (seq % 4 == 0) id(led_white).turn_on();
            if (seq % 4 == 2) id(led_white).turn_off();
          } else if (id(indicator_white).state == 1) {
            id(led_white).turn_on();
          } else {
            id(led_white).turn_off();
          }
          if (id(indicator_red).state == 3) {
            if (seq % 2 == 0) id(led_red).turn_on();
            if (seq % 2 == 1) id(led_red).turn_off();
          } else if (id(indicator_red).state == 2) {
            if (seq % 4 == 0) id(led_red).turn_on();
            if (seq % 4 == 2) id(led_red).turn_off();
          } else if (id(indicator_red).state == 1) {
            id(led_red).turn_on();
          } else {
            id(led_red).turn_off();
          }
          if (id(indicator_yellow).state == 3) {
            if (seq % 2 == 0) id(led_yellow).turn_on();
            if (seq % 2 == 1) id(led_yellow).turn_off();
          } else if (id(indicator_yellow).state == 2) {
            if (seq % 4 == 0) id(led_yellow).turn_on();
            if (seq % 4 == 2) id(led_yellow).turn_off();
          } else if (id(indicator_yellow).state == 1) {
            id(led_yellow).turn_on();
          } else {
            id(led_yellow).turn_off();
          }
          if (id(indicator_green).state == 3) {
            if (seq % 2 == 0) id(led_green).turn_on();
            if (seq % 2 == 1) id(led_green).turn_off();
          } else if (id(indicator_green).state == 2) {
            if (seq % 4 == 0) id(led_green).turn_on();
            if (seq % 4 == 2) id(led_green).turn_off();
          } else if (id(indicator_green).state == 1) {
            id(led_green).turn_on();
          } else {
            id(led_green).turn_off();
          }
      - globals.set:
          id: sequence
          value: !lambda return (id(sequence) + 1) % 16;
          
switch:
  - platform: gpio
    id: led_blue
    pin: GPIO23
  - platform: gpio
    id: led_white
    pin: GPIO25
  - platform: gpio
    id: led_red
    pin: GPIO26
  - platform: gpio
    id: led_yellow
    pin: GPIO27
  - platform: gpio
    id: led_green
    pin: GPIO33


i2c:
  sda: GPIO21
  scl: GPIO4
  frequency: 800khz

font:
    # gfonts://family[@weight]
  # - file: "gfonts://Nanum+Gothic+Coding"
  - file: "gfonts://Lekton"
    id: small
    size: 16
  # - file: "gfonts://Nanum+Gothic+Coding"
  - file: "gfonts://Lekton"
    id: medium
    size: 32
  #- file: "gfonts://Nanum+Gothic+Coding"
  - file: "gfonts://Lekton"
    id: large
    size: 64


display:
  - platform: ssd1306_i2c
    id: disp
    # show_test_card: true
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-

      const char *m1 = id(display_med_1).state.c_str();
      const char *m2 = id(display_med_2).state.c_str();
      const char *m3 = id(display_med_3).state.c_str();
      const char *l1 = id(display_large_1).state.c_str();
      const char *s1 = id(display_small_1).state.c_str();
      const char *s2 = id(display_small_2).state.c_str();
      const char *s3 = id(display_small_3).state.c_str();
      const char *s4 = id(display_small_4).state.c_str();

      const char *tfs1 = id(time_format_s1).state.c_str();
      const char *tfs2 = id(time_format_s2).state.c_str();
      const char *tfs3 = id(time_format_s3).state.c_str();
      const char *tfs4 = id(time_format_s4).state.c_str();
      const char *tfm1 = id(time_format_m1).state.c_str();
      const char *tfm2 = id(time_format_m2).state.c_str();
      const char *tfm3 = id(time_format_m3).state.c_str();
      const char *tfl1 = id(time_format_l1).state.c_str();

      char now[17];

      struct tm c_tm = id(esptime).now().to_c_tm();
      
      if (!strcmp(s1, "") && strcmp(tfs1, "")) {
          strftime(now, 17, tfs1, &c_tm);
          it.printf(0, 0, id(small), "%s", now);
      } else {
        it.printf(0, 0, id(small), "%s", s1);
      }
      if (!strcmp(s2, "") && strcmp(tfs2, "")) {
          strftime(now, 17, tfs2, &c_tm);
          it.printf(0, 16, id(small), "%s", now);
      } else {
        it.printf(0, 16, id(small), "%s", s2);
      }
      if (!strcmp(s3, "") && strcmp(tfs3, "")) {
          strftime(now, 17, tfs3, &c_tm);
          it.printf(0, 32, id(small), "%s", now);
      } else {
        it.printf(0, 32, id(small), "%s", s3);
      }
      if (!strcmp(s4, "") && strcmp(tfs4, "")) {
          strftime(now, 17, tfs4, &c_tm);
          it.printf(0, 48, id(small), "%s", now);
      } else {
        it.printf(0, 48, id(small), "%s", s4);
      }
      if (!strcmp(m1, "") && strcmp(tfm1, "")) {
          strftime(now, 17, tfm1, &c_tm);
          it.printf(0, 0, id(medium), "%s", now);
      } else {
        it.printf(0, 0, id(medium), "%s", m1);
      }
      if (!strcmp(m2, "") && strcmp(tfm2, "")) {
          strftime(now, 17, tfm2, &c_tm);
          it.printf(0, 16, id(medium), "%s", now);
      } else {
        it.printf(0, 16, id(medium), "%s", m2);
      }
      if (!strcmp(m3, "") && strcmp(tfm3, "")) {
          strftime(now, 17, tfm3, &c_tm);
          it.printf(0, 32, id(medium), "%s", now);
      } else {
        it.printf(0, 32, id(medium), "%s", m3);
      }      
      if (!strcmp(l1, "") && strcmp(tfl1, "")) {
          strftime(now, 17, tfl1, &c_tm);
          it.printf(0, 0, id(large), "%s", now);
      } else {
        it.printf(0, 0, id(large), "%s", l1);
      }



    update_interval: 1s
    flip_x: False
    flip_y: False

# These components are used to write on the screen
# Display Line 1 (Large)
# - Max 4 characters, full screen
# Display Line 1/2/3 (Medium)
# - Max 8 characters (Top / Middle / Bottom)
# Display Line 1/2/3/4 (Small)
# - Max 16 characters (Top / Top Middle / Bottom Middle / Bottom)
# Allowed combinations:
# Large - on it's own
# M1 and M3
# S1, S2 and M3
# M1, S3 and S4
# S1, M2 and S4
# S1, S2, S3, S4
# Any other combinations will result in larger lines overwriting smaller
text:
  - platform: template
    id: display_small_1
    name: Display Line 1 (Small)
    optimistic: true
    mode: TEXT
    on_value:
      then:
        - component.update: disp
  - platform: template
    id: display_small_2
    name: Display Line 2 (Small)
    optimistic: true
    mode: TEXT
    on_value:
      then:
        - component.update: disp
  - platform: template
    id: display_small_3
    name: Display Line 3 (Small)
    optimistic: true
    mode: TEXT
    on_value:
      then:
        - component.update: disp
  - platform: template
    id: display_small_4
    name: Display Line 4 (Small)
    optimistic: true
    mode: TEXT
    on_value:
      then:
        - component.update: disp
  - platform: template
    id: display_med_1
    name: Display Line 1 (Medium)
    optimistic: true
    mode: TEXT
    on_value:
      then:
        - component.update: disp
  - platform: template
    id: display_med_2
    name: Display Line 2 (Medium)
    optimistic: true
    mode: TEXT
    on_value:
      then:
        - component.update: disp
  - platform: template
    id: display_med_3
    name: Display Line 3 (Medium)
    optimistic: true
    mode: TEXT
    on_value:
      then:
        - component.update: disp
  - platform: template
    id: display_large_1
    name: Display Line 1 (Large)
    optimistic: true
    mode: TEXT
    on_value:
      then:
        - component.update: disp
  - platform: template
    id: time_format
    name: Time format
    optimistic: true
    mode: TEXT
    initial_value: "%H:%M"
    restore_value: True
  - platform: template
    id: time_format_s1
    name: "Time format for S1"
    optimistic: true
    mode: TEXT
    initial_value: ""
    restore_value: true
  - platform: template
    id: time_format_s2
    name: "Time format for S2"
    optimistic: true
    mode: TEXT
    initial_value: ""
    restore_value: true
  - platform: template
    id: time_format_s3
    name: "Time format for S3"
    optimistic: true
    mode: TEXT
    initial_value: ""
    restore_value: true
  - platform: template
    id: time_format_s4
    name: "Time format for S4"
    optimistic: true
    mode: TEXT
    initial_value: ""
    restore_value: true
  - platform: template
    id: time_format_m1
    name: "Time format for M1"
    optimistic: true
    mode: TEXT
    initial_value: ""
    restore_value: true
  - platform: template
    id: time_format_m2
    name: "Time format for M2"
    optimistic: true
    mode: TEXT
    initial_value: ""
    restore_value: true
  - platform: template
    id: time_format_m3
    name: "Time format for M3"
    optimistic: true
    mode: TEXT
    initial_value: ""
    restore_value: true
  - platform: template
    id: time_format_l1
    name: "Time format for L1"
    optimistic: true
    mode: TEXT
    initial_value: ""
    restore_value: true


# To clear the screen, best do this before changing
# the line format used
button:
  - platform: template
    name: Clear Screen
    id: cls
    icon: "mdi:cancel"
    on_press: 
      then:
        - text.set:
            id: display_small_1
            value: ""                  
        - text.set:
            id: display_small_2
            value: ""                  
        - text.set:
            id: display_small_3
            value: ""                  
        - text.set:
            id: display_small_4
            value: ""                  
        - text.set:
            id: display_med_1
            value: ""                  
        - text.set:
            id: display_med_2
            value: ""         
        - text.set:
            id: display_med_3
            value: ""                           
        - text.set:
            id: display_large_1
            value: ""                  
